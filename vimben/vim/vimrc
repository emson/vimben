""" ------------------------------------
""" Ben's Vim Configuration ============
""" ------------------------------------

" remap leader key from '\' to ','
let mapleader = ","


""" Setup Vundle =======================
set nocompatible " required for Vundle
filetype off     " required for Vundle

" Initialize Vundle
" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

""""" Filetypes ========================

Plugin 'vim-ruby/vim-ruby'

Plugin 'elixir-lang/vim-elixir'

""""""" Markdown
" Markdown is now included in vim, but by default .md is read as Modula-2
" files.  This fixes that, because I don't ever edit Modula-2 files :)
Plugin 'jtratner/vim-flavored-markdown'
  let g:markdown_fenced_languages=['ruby', 'javascript', 'elixir', 'python', 'clojure', 'sh', 'html', 'sass', 'scss', 'haml', 'erlang']
  autocmd BufNewFile,BufReadPost *.md,*.markdown set filetype=markdown
  autocmd FileType markdown set tw=80

""""" End Filetypes ====================

""""" Utilities ========================

Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

Plugin 'mileszs/ack.vim'

Plugin 'tpope/vim-fugitive'

Plugin 'tpope/vim-endwise'

Plugin 'tpope/vim-surround'

Plugin 'tpope/vim-commentary'

Plugin 'b3niup/numbers.vim'   " Plugin for intelligently toggling line numbers

Plugin 'mattn/emmet-vim'

Plugin 'rizzatti/dash.vim'

Plugin 'jlanzarotta/bufexplorer'

Plugin 'honza/vim-snippets'

Plugin 'leafgarland/typescript-vim'

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
  let g:snippets_dir = "$HOME/.vim/bundle/vim-snippets/snippets"

Plugin 'scrooloose/syntastic' " Syntax highlighting
  let g:syntastic_mode_map = { "mode": "active",
                               \ "passive_filetypes": ["java"] }

" Plugin 'scrooloose/nerdcommenter'

Plugin 'scrooloose/nerdtree'
  let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.class$', '\.o']
  let NERDTreeHijackNetrw = 0

  augroup AuNERDTreeCmd
    autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
    autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()
  augroup END

  " If the parameter is a directory, cd into it
  function s:CdIfDirectory(directory)
    let explicitDirectory = isdirectory(a:directory)
    let directory = explicitDirectory || empty(a:directory)
    if explicitDirectory
      exe "cd " . fnameescape(a:directory)
    endif
    " Allows reading from stdin
    " ex: git diff | mvim -R -
    if strlen(a:directory) == 0
      return
    endif
    if directory
      NERDTree
      wincmd p
      bd
    endif
    if explicitDirectory
      wincmd p
    endif
  endfunction

  " NERDTree utility function
  function s:UpdateNERDTree(...)
    let stay = 0
    if(exists("a:1"))
      let stay = a:1
    end
    if exists("t:NERDTreeBufName")
      let nr = bufwinnr(t:NERDTreeBufName)
      if nr != -1
        exe nr . "wincmd w"
        exe substitute(mapcheck("R"), "<CR>", "", "")
        if !stay
          wincmd p
        end
      endif
    endif
    if exists(":CommandTFlush") == 2
      CommandTFlush
    endif
  endfunction

  " Map leader key n to open NERDTree
  map <Leader>n :NERDTreeToggle<CR>


""""" End Utilities ====================

""""" UI Plugins =======================
Plugin 'bling/vim-airline'       " UI statusbar niceties
  set laststatus=2               " enable airline even if no splits
  let g:airline_theme='luna'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#syntastic#enabled = 1
  let g:airline#extensions#tabline#enabled = 0
  " let g:airline_mode_map = {
  "       \ 'n' : 'N',
  "       \ 'i' : 'I',
  "       \ 'R' : 'REPLACE',
  "       \ 'v' : 'VISUAL',
  "       \ 'V' : 'V-LINE',
  "       \ 'c' : 'CMD   ',
  "       \ }

Plugin 'dandorman/vim-colors'

""""" End UI Plugins ===================

""""" Code Navigation ===============
Plugin 'kien/ctrlp.vim.git'
  let g:ctrlp_mru_files = 1              " Enable Most Recently Used files feature
  let g:ctrlp_jump_to_buffer = 2         " Jump to tab AND buffer if already open
  let g:ctrlp_dotfiles = 1               "  show (.) dotfiles in match list
  " let g:ctrlp_showhidden = 0             " do not show hidden files in match list
  let g:ctrlp_use_caching = 0            " don't cache, we want new list immediately each time
  let g:ctrlp_max_files = 0              " no restriction on results/file list
  let g:ctrlp_dont_split = 'NERD_tree_2' " don't split these buffers
  let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|gitkeep)$',
        \ 'file': '\v\.(exe|so|dll|log|gif|jpg|jpeg|png|psd|DS_Store|ctags|gitattributes)$'
        \ }
  " let g:ctrlp_user_command = 'find %s -type f'

" Plugin 'tpope/vim-vinegar' " navigate up a directory with '-' in netrw, among other things
" Plugin 'ervandew/supertab'

""""" End Code Navigation ===========

call vundle#end() " required for Vundle

" Turn on plugins, indentation, etc.
filetype plugin indent on
""" End setup Vundle ===================

""" UI Tweaks ==========================
set number   " Show line numbers
set ruler    " Show line and column number
set t_Co=256 " Force 256 colors
set t_ut= " improve screen clearing by using the background color
set background=dark
syntax enable
colorscheme molokai
set encoding=utf-8    " Set default encoding to UTF-8
set term=screen-256color
let $TERM='screen-256color'
set fillchars+=vert:\  " vim split bar styling, remove '|' NB space after \
" Highlighting line and column
set cul " highlight current line
set cuc " highlight column
" set greyed out numbering
highlight LineNr ctermfg=59


""" End UI Tweaks ======================

""" Keyboard shortcut setup =====================



" Remove highlights
" Clear the search buffer when hitting return
nnoremap <cr> :nohlsearch<cr>

" NO ARROW KEYS COME ON
map <Left> :echo "Left arrow disabled!"<cr>
map <Right> :echo "Right arrow disabled!"<cr>
map <Up> :echo "Up arrow disabled!"<cr>
map <Down> :echo "Down arrow disabled!"<cr>
" map arrow keys to previous / next buffer
noremap <left> :bp<CR>
noremap <right> :bn<CR>

" Comment/uncomment blocks by selecting them visually and using # or -#
" vnoremap # :s#^#\##<cr>
" vnoremap -# :s#^\###<cr>

""" End Keyboard shortcut setup =================

""" Vim environment handling tweaks ====

" Whitespace
set wrap                          " wrap lines
set linebreak                     " wrap lines at linebreaks
set nolist                        " list disables linebreak
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
set textwidth=0                   " prevent Vim from automatically inserting line breaks in newly entered text
set wrapmargin=0                  " prevent Vim from automatically inserting line breaks in newly entered text
" Add spell checking
"https://www.linux.com/learn/using-spell-checking-vim
" set spell spelllang=en_gb

" Searching
set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

" Scroll before reaching the edge
set scrolloff=8       " Number of lines from vertical edge to start scrolling
set sidescrolloff=15  " Number of cols from horizontal edge to start scrolling
set sidescroll=1      " Number of cols to scroll at a time


" " Tab competion
set wildmode=list:longest,list:full
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem
" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Ignore bundler and sass cache
set wildignore+=vendor/gems/*,vendor/cache/*,.bundle/*,.sass-cache/*
" Disable temp and backup files
set wildignore+=*.swp,._*


""""" Normalization ====================
" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
" au BufWrite * silent call DeleteTrailingWS() " auto remove trailing spaces on save
" remove trailing spaces with leader w
nmap <Leader>w :call DeleteTrailingWS()<CR>
""""" End Normalization ================

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen

" Adjust viewports to the same size
map <Leader>= <C-w>=
" Double tab to jump between panes
map <Tab> <C-W>
map <Tab><Tab> <C-W><C-W>


""""" Backup files  ====================

set backupdir=$HOME/.vim/_backup//    " where to put backup files.
set directory=$HOME/.vim/_temp//      " where to put swap files.

""""" End Backup files  ================





